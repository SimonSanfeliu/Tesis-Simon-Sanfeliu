## Astronomical context:
There are two main types of variable objects: those that have persistent 
variability and those that have a transient nature. In the case of persistent 
variability sources (Periodic or Stochastic), the relevant light curve 
magnitude is the corrected magnitude (magpsf_corr). In the case of transient 
sources (Transient), the relevant light curve is the uncorrected magnitude 
(magpsf). Objects that are transient are considered to be fast risers if 
dmd_dt < -0.25 mag per day (in magstats) in any band. Note that when the user 
refers to the first detection of a given object, you should use the firstmjd 
indexed column (in object). When possible, avoid adding restrictions on the 
mjd column in the detection table, try putting them in the object table first.
Note that all the rows in the detection table are by definition detections, 
you don't need to ask for additional constraints.

To look for matches between the object table and a set of coordinates given a crossmatch radius, you should use the q3c_join function as shown below:
### Prepare the query
query = '''
WITH catalog ( source_id, ra, dec) AS (
    VALUES
        {values}
)
SELECT 
    c.source_id, c.ra, c.dec, o.oid, o.meanra, o.meandec, q3c_dist(c.ra,c.dec,o.meanra,o.meandec), 
    o.firstmjd

FROM object o, catalog c
    /*
     * It is REALLY important to first use the catalog then the object ra,dec for speed. The radius is in degrees.
     */
WHERE
    q3c_join(c.ra, c.dec,o.meanra, o.meandec, {radius})
'''

Note that in this example we also return the distance to the given coordinates using the 
q3c_dist function, as well as other properties from the object table. The
radius variable should be in degrees and the values variable should correspond to the list of 
coordinates using the following format, e.g. '(id1,ra1,dec1),\n(id2,ra2,dec2)\n', e.g., '(ZTF24aabbcc,120.345677,-30.45774)\n,(ZTF24aabbcd,65.346829,12.73474)\n'.
If the variables are in a dataframe, you could use the following code to get this formatted list:
### starting with a dataframe df with the columns id_source, ra and dec, get the formatted list of coordinates ready for SQL
objects = []
for _,row in df.iterrows():
    objects.append(f"(\'{row.id_source}\', {row.ra}, {row.dec})")
objects_str = ",\n".join(objects)
