## Astronomical context:

### Types of objects:
- There are two main types of variable objects: those that have persistent variability and those that have a transient nature. 
- In the case of persistent variability sources (Periodic or Stochastic), the relevant light curve magnitude is the corrected magnitude (magpsf_corr). 
- In the case of transient sources (Transient), the relevant light curve is the uncorrected magnitude (magpsf).

### Definitions:
- The initial rise rate is indicated by the dmdt_first column in the magstat table, separated by band. You need to use the filter id (fid) column to specify the given band.
- If the user requests an initial rise rate greater than some value, what they mean is that the rise rate should be less than the negative of that value, because in astronomy magnitudes are lower for brighter objects, so when an object is rising its magnitudes are decreasing.
- Objects that are transient are considered to be fast risers if dmdt_first < -0.25 mag per day (in the table magstat) in any band. 

### Restriction on dates or times:
- When the user refers to the first detection of a given object, you should use the firstmjd column (indexed in the table object). 
- When possible, avoid adding restrictions on the mjd column in the detection table, try putting them in the object table instead.
- All the rows in the detection table are by definition detections. this in not the case for the table forced_photometry, where even measurements that are not considered to be detections are reported. 
- You need to convert dates (if given) into mjd before doing any query.
- If the year is not specified, assume that the user refers to the current year (2024).

### Nested subqueries vs inner joins:
- In general, if you need to query data from the detection and feature table, it is recommended to use nested subqueries that do the filtering with information not contained in the detection or feature table first, using the WHERE statement and requesting the oid column to be inside a given list. For example, use WHERE oid in {subquery}, where subquery returns a list of oids.
- However, sometimes it is necessary to use an INNER JOIN between tables to get all the requested columns. When this happens, make sure to use the inner join clause when it is ABSOLUTELY necessary.

### Samples of objects:
- If you are asked to provide a sample of a given set of objects, you can use the LIMIT command. If you do this, it will be more feasible to do multiple inner joins in some cases.
- When you are asked to find 'at most' a number of examples, use the 'LIMIT {n}' command in SQL, where n is the number of examples.

### Object table:
- The number of detections is contained in the ndet variable located in the object table.

### Probability table:
- Use the ranking=1 column in the probability table to get the highest probability class (for a given classifier and classifier_version).
- The probability table has the column "classifier_version", that indicates the version of the classifier used. Use this column to specifiy the version of the classifier for the particular query.
- If you are querying the probability table to get a list of oids, and if you want to get only one result for a given classifier, irrespective of the version of the classifier, use the DISTINCT command, e.g. 'SELECT DISTINCT oid'. However, it is preferable that the version of the classifier is specified. 
- If you want to check that an object is periodic, you could check whether the probability of being in the periodic branch (lc_classifier_periodic) has the largest value (ranking=1).
- Keep in mind that sometimes the concept of probability is referred to as a "posibility" by some users.

### feature table
- You should avoid using the feature table as much as possible, since it is generally very expensive to query data from it.
- For example, avoid using the feature (or detection) table to get the time of first detection, use the firstmjd column from the object table instead.
- If you do want to select objects based on restrictions on the feature table, we recommend that you use nested subqueries, where the innermost query defines the sample based on restrictions in the feature or other tables, and where the 
upper levels do inner joins between the different tables and select the necessary columns. 
- The galactic latitude is in the value column of the feature table, for name='gal_b'.
- The difference between the minimum and maximum magnitudes in ZTF for a given band is in the value column of the feature table, for name='delta_mag_fid'.
- The light curve (photometric) period is in the value column of the feature table, for name='Multiband_period'.
- The light curve amplitude is in the value column of the feature table, for name='Amplitude'.

### detection table:
- Every detection in the detection table has a unique candidate identifier (indexed column candid)
- When asked for magnitude errors, the user is referring to the columns sigmapsf_corr and sigmapsf_corr_ext from the detection table.

### dataquality table:
- The dataquality table contains information related to the quality of every detection in the database. It has information for every object (with index oid) and candidate detection (with index candid) that is not available in the detection table. 
- Some of the most relevant columns are the reduced chi-square for PSF-fit (chipsf), the full width half maximum (fwhm), the star galaxy 
classification score from SEXtractor (classtar), and the magnitude zero point estimate and its error (magzpsci, magzpunc).

### forced_photometry table:

### non_detection table:

### PanSTARRS (PS1) and the ps1_ztf table:
- The ps1_ztf table contains information about the closest sources in the PanSTARRS catalog. 
- Variables ending in 1 refer to the closest object, variables ending in 2 refer to the second closest object, and variables ending in 3 refer to third closest object. For example, the variables associated to these closest PS1 objects from a given ZTF object are sgscore1, which is the star galaxy classication score; distpsnr1, which is the distance to the source; sgmag1, srmag1, simag1, szmag1 which are 
the magnitudes in the g, r, i, and z bands, respectively; and objectidps1, which is the PanSTARRS unique identifier of the object.

### gaia_ztf:

### ss_ztf:

### allwise table:

### xmatch table:
- The xmatch table has three identifiers that are indexed columns: oid, which corresponds to the unique ZTF identifier; catid, which corresponds to the catalog identifier; and oid_catalog, which is the unique identifier for a given source in the catalog nomenclature. 
- If you want to associate objects in xmatch with one of the available xmatch catalogs, e.g. allwise, you should first do an inner join between xmatch and allwise using the oid_catalog identifier. 
- If you want to restrict the query to some objects based on other properties, you should use two nested queries that first select the oid_catalog identifiers and a second innermost query that uses the oid column to apply additional restrictions, e.g.
```python
innermostquery = '''
SELECT
    oid
FROM
    object
WHERE
    ndet>1
'''
subquery = '''
SELECT
   oid_catalog
FROM
   xmatch
WHERE
   oid IN {innermostquery}
'''
final_query = '''
SELECT
   *
FROM
   xmatch INNER JOIN allwise
   ON xmatch.oid_catalog=allwise.oid_catalog
WHERE
   allwise.oid_catalog IN {subquery}
'''
```

### Spatial queries: 
To look for matches between the object table and a set of coordinates given a crossmatch radius, you can use the q3c_join function as shown below:
```python
# Prepare the query
query = '''
-- ids and coordinates of the catalog against which we want to crossmatch
WITH catalog ( source_id, ra, dec) AS (
    VALUES
        {values}
)
SELECT 
    c.source_id, c.ra, c.dec, o.oid, o.meanra, o.meandec, q3c_dist(c.ra,c.dec,o.meanra,o.meandec), 
    o.firstmjd

FROM object o, catalog c
    -- It is REALLY important to first use the catalog then the object ra,dec for speed. The radius is in degrees.
WHERE
    q3c_join(c.ra, c.dec, o.meanra, o.meandec, {radius})
'''
```
In this example, we also return the distance between matching objects 
using the q3c_dist function, as well as other properties from the object table. 
It is very important that the radius variable should be in degrees. In this example, the values variable should 
correspond to the list of coordinates using the following format, e.g. 
'(id1,ra1,dec1),\n(id2,ra2,dec2)\n', e.g., '(ZTF24aabbcc,120.345677,-30.45774)\n,(ZTF24aabbcd,65.346829,12.73474)\n'.

If the external catalog ids and coordinates are in a dataframe with column names id_source, ra, and dec, respectively, you could use the following code to get this formatted list:
```python
# starting with a dataframe df with the columns id_source, ra and dec, get the formatted list of coordinates ready for SQL
objects = []
for _,row in df.iterrows():
    objects.append(f"(\'{row.id_source}\', {row.ra}, {row.dec})")
objects_str = ",\n".join(objects)
```
Finally, remember that the table object does not have the ra and dec of every detection, only their mean values, so we used the meanra and meandec variables in the example above.
