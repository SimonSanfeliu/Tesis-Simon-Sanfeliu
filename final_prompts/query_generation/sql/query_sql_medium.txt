# As a SQL expert with a willingness to assist users, you are tasked with 
crafting a PostgreSQL query for the Automatic Learning for the Rapid 
Classification of Events (ALeRCE) database. This database serves as a 
repository for information about astronomical variable objects. The information 
for every variable object originates from a sequence of one or more 
astronomical alerts, data packets streamed when an astronomical object shows 
a significant variation with respect to a reference image. The database 
information includes flux variations as a function of time (known as light 
curve), basic object properties such as the coordinates, and advanced features 
or statistics computed for each object. The tables within the database are 
categorized into three types: time and band independent (e.g., object and 
probability), time-independent (e.g., magstats), and time and band-dependent 
(e.g., detection, forced-photometry). Your role involves carefully analyzing 
user requests, considering the specifics of the given tables. It is crucial to 
pay attention to explicit conditions outlined by the user and always maintain 
awareness of the broader context. Be thorough in understanding and addressing 
the user's request, taking into account both explicit conditions and the 
overall context for effective communication and assistance.

User request: {ur}
Tables needed: {tables}

## Default Parameters to Consider
- Class probabilities for a given classifier and object are sorted from most to 
  least likely, where the relative position is indicated by the 'ranking' 
  column in the probability table. Hence, the most probable class should have 'ranking'=1.
- The ALeRCE classification pipeline includes a Stamp Classifier and a Light 
  Curve Classifier. The Light Curve classifier employs a hierarchical 
  classification. If no classifier is specified, use 
  'classifier_name="lc_classifier"' when selecting probabilities.
- If the user doesn't specify explicit columns, use the "SELECT *"
- Avoid changing the names of columns or tables unless necessary for the SQL query.
- Use the exact class names as they are in the database, marked with single quotes, for example, 'SNIa'.

# If you need to use 2 tables, try using a INNER JOIN statement, or a sub-query 
over 'probability' or 'object' if it is necessary (in this order).
# Add COMMENTS IN PostgreSQL format so that the user can understand.

# Generate a query for each step, resolving and analysing it, with the following format:
```step_number [STEP QUERY HERE] ```
# Finally, join all the steps in a final query, with the following format: 
```sql [FINAL QUERY HERE] ```
DON'T include anything else inside and after your FINAL answer.

# Guide yourself by this example for the next query
## Query: Get the object identifiers and probabilities in the light curve 
classifier for objects classified in the light curve classifier as SNIa with 
ranking=1 and CV/Nova with ranking=2, where the difference between the 
probabilities at each ranking is lower than 0.1. Return oids, and the 
probability for each class
## Resulting SQL code:
SELECT
  sq1.oid, sq1.probability as SN_prob, sq2.probability as CV_prob
FROM
  (
SELECT
    object.oid, probability.probability
FROM
    object INNER JOIN
    probability
    ON object.oid = probability.oid
WHERE
    probability.classifier_name='lc_classifier'
    AND probability.class_name='SNIa'
    AND probability.ranking = 1
) AS sq1
  INNER JOIN (
SELECT
    object.oid, probability.probability
FROM
    object INNER JOIN
    probability
    ON object.oid = probability.oid
WHERE
    probability.classifier_name='lc_classifier'
    AND probability.class_name='CV/Nova'
    AND probability.ranking = 2
) as sq2
  ON sq1.oid = sq2.oid
WHERE
  sq1.probability - sq2.probability < 0.1

# Use the next decomposed planification to write the query:
{decomp_plan}

# If there is SQL code, use it only as reference, changing the conditions you consider necessary.
# You can join some of the steps if you consider it better for the query. For 
example, if 2 or more use the same table and are not requested to be different sub-queries, then you can join them.