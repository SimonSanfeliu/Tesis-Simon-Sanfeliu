# Your task is to DECOMPOSE the user request into a series of steps required to generate a PostgreSQL query that will be used for retrieving requested information from the ALeRCE database.
For this, outline a detailed decomposition plan for its systematic resolution, describing and breaking down the problem into subtasks and/or subqueries.
Be careful to put all the information and details needed in the description, like conditions, the table and column names, etc.
Take in consideration the advices, conditions and names from ""General Context"" and details of the database, or the query will not be optimal.
List the steps in the order in which they should be planned. Add to each numbered step a label in square brackets, like [initial planning], [join table], [replace], [condition], [join], [sub-query], etc.
The request is a very difficult and advanced query, so you will need to use JOINs, INTERSECTs and UNIONs statements, together with Nested queries. It is very important that you give every possible detail in each step, describing the statements and the nested-queries that are required.

User request: Get the object identifiers, probabilities in the stamp classifier and light curves (only detections) for objects whose highest probability in the stamp classifier is obtained for class SN, that had their first detection in between the MJDs 60188 and 60189, and that qualify as fast risers.
Tables needed: [object, probability, detection, magstat]

# General context about the database:
## General Information about the Schema and Database
- An object is uniquely identified by its object identifier or 'oid' index, used in most tables
- A detection from an object is identified by the candidate identifier or 'candid' index, used only in the detection table
- A given band is identified by the filter identifier or 'fid' index, used in the magstats, feature, and detection tables
- In most cases you will need to use information from the object table
- When particular astronomical classes are requested, you will need to use the probability table 
- Prioritize obtaining oids in a subquery to optimize the main query.
- Utilize nested queries to retrieve oids, preferably selecting the 'probability' or 'object' table.
- Avoid JOIN clauses; instead, favor nested queries.
- Beware of variables that are not indexed when doing the queries. Favour using nested queries where the inner queries use indexed variables.
- Note that the typical timeout time is 2 minutes
- Special attention needs to be paid to the feature table, which, if possible, should be avoided. In this table the name of a given feature is stored in the column 'name' and its value for a given object in the column 'value'. These columns are not indexed, so you should query this table in the outer levels of a nested query, after most of the filtering has already happened using indexed variables.

## ALeRCE Pipeline Details
- Stamp Classifier (denoted as ""stamp_classifier""): A convolutional neural network that uses as input the image stamps from a given object and that uses a 5 class taxonomy. This classifier is triggered only by the first alert of every object.
- Light Curve Classifier (denoted as ""lc_classifier""): A balanced hierarchical random forest classifier that uses as input object features and that consists of four models with a taxonomy of 15 classes in total. This classifier is triggered with every new alert of an object with at least six detections in a given band.
- The first hierarchical classifier of the Light Curve Classifier has three classes: [periodic, stochastic, transient], denoted as ""lc_classifier_top.""
- Three additional classifiers of the Light Curve Classifier specialize in different types of object: Periodic, Transient, and Stochastic, denoted as ""lc_classifier_periodic,"" ""lc_classifier_transient,"" and ""lc_classifier_stochastic,"" respectively.
- The 15 classes are separated for each object type:
  - Transient: [SNe Ia ('SNIa'), SNe Ib/c ('SNIbc'), SNe II ('SNII'), and Super Luminous SNe ('SLSN')].
  - Stochastic: [Active Galactic Nuclei ('AGN'), Quasi Stellar Object ('QSO'), 'Blazar', Cataclysmic Variable/Novae ('CV/Nova'), and Young Stellar Object ('YSO')].
  - Periodic: [Delta Scuti ('DSCT'), RR Lyrae ('RRL'), Cepheid ('Ceph'), Long Period Variable ('LPV'), Eclipsing Binary ('E'), and other periodic objects ('Periodic-Other')].
## Probability Variable Names
- classifier_name=('lc_classifier', 'lc_classifier_top', 'lc_classifier_transient', 'lc_classifier_stochastic', 'lc_classifier_periodic', 'stamp_classifier')
- Classes in 'lc_classifier'= ('SNIa', 'SNIbc', 'SNII', 'SLSN', 'QSO', 'AGN', 'Blazar', 'CV/Nova', 'YSO', 'LPV', 'E', 'DSCT', 'RRL', 'CEP', 'Periodic-Other')
- Classes in 'lc_classifier_top'= ('transient', 'stochastic', 'periodic')
- Classes in 'lc_classifier_transient'= ('SNIa', 'SNIbc', 'SNII', 'SLSN')
- Classes in 'lc_classifier_stochastic'= ('QSO', 'AGN', 'Blazar', 'CV/Nova', 'YSO')
- Classes in 'lc_classifier_periodic'= ('LPV', 'E', 'DSCT', 'RRL', 'CEP', 'Periodic-Other')
- Classes in 'stamp_classifier'= ('SN', 'AGN', 'VS', 'asteroid', 'bogus')

# # Astronomical context:
There are two main types of variable objects: those that have persistent variability and those that have a transient nature. In the case of persistent variability sources (Periodic or Stochastic), the relevant light curve magnitude is the corrected magnitude (magpsf_corr). In the case of transient sources (Transient), the relevant light curve is the uncorrected magnitude (magpsf). 
Objects that are transient are considered to be fast risers if dmd_dt < -0.25 mag per day (in magstats) in any band. 
Note that when the user refers to the first detection of a given object, you should use the firstmjd indexed column (in object). When possible, avoid adding restrictions on the mjd column in the detection table, try putting them in the object table first.
Note that all the rows in the detection table are by definition detections, you don't need to ask for additional constraints.

# # Important details about the database required for the query:
## Default Parameters to Consider
- Class probabilities for a given classifier and object are sorted from most to least likely, where the relative position is indicated by the 'ranking' column in the probability table. Hence, the most probable class should have 'ranking'=1.
- The ALeRCE classification pipeline includes a Stamp Classifier and a Light Curve Classifier. The Light Curve classifier employs a hierarchical classification. If no classifier is specified, use 'classifier_name=""lc_classifier""' when selecting probabilities.
- If the user doesn't specify explicit columns, use the "SELECT" SQL statement to choose all possible columns.
- Avoid changing the names of columns or tables unless necessary for the SQL query.
- Use the exact class names as they are in the database, marked with single quotes, for example, 'SNIa'.

### IF THE 'feature' TABLE is used with 2 or more features, you need to take the following steps, because it is a transposed table (each feature is in a different row).
I. Create a sub-query using the 'probability' TABLE filtering the desired objects.
II. For each feature, you have to make a sub-query retrieving the specific feature adding the condition of its value, including an INNER JOIN with the 'probability' sub-query to retrieve only the features associated with the desired spatial objects.
III. Make an UNION between the sub-queries of each feature from step II
IV. Make an INTERSECT between the sub-queries of each feature from step II
V. Filter the UNION query selecting the 'oids' in the INTERSECT query
VI. Add to the final result from step V the remaining conditions

### GENERAL
- If the user doesn't specify explicit columns or information that is not in a column, choose all the columns, for example by using the "SELECT" SQL statement.
- Use the exact class names as they are in the database, marked with single quotes, for example, 'SNIa'.
# If you need to use 2 or 3 tables, try using a sub-query over 'probability' TABLE, 'object' TABLE, over an INNER JOIN between 'probability' and 'object', or over an INNER JOIN between 'probability', 'object' and 'magstat', if it is necessary (in this order).
# Add COMMENTS IN PostgreSQL format so that the user can understand.

# DON'T RETURN ANY SQL CODE, just the description of each step required to generate it.