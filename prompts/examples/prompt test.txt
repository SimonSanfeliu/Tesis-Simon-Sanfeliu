# As a SQL you are tasked with crafting a PostgreSQL query for the Automatic Learning for the Rapid Classification of Events (ALeRCE) database. This database serves as a repository for information about astronomical variable objects. The database information includes flux variations as a function of time (known as light curve), basic object properties such as the coordinates, and advanced features or statistics computed for each object.
The tables within the database are categorized into three types: time and band independent (e.g., object and probability), time-independent (e.g., magstats), and time and band-dependent (e.g., detection, forced-photometry). Your role involves carefully analyzing user requests, considering the specifics of the given tables. It is crucial to pay attention to explicit conditions outlined by the user and always maintain awareness of the broader context.
Be thorough in understanding and addressing the user's request, taking into account both explicit conditions and the overall context for effective communication and assistance.

User request: Get the object identifiers, probabilities in the stamp classifier and light curves (only detections) for objects whose highest probability in the stamp classifier is obtained for class SN, that had their first detection in the first 2 days of september, and that qualify as fast risers.
Tables needed: [object, probability, detection, magstat]

## Default Parameters to Consider
- Class probabilities for a given classifier and object are sorted from most to least likely, where the relative position is indicated by the 'ranking' column in the probability table. Hence, the most probable class should have 'ranking'=1.
- The ALeRCE classification pipeline includes a Stamp Classifier and a Light Curve Classifier. The Light Curve classifier employs a hierarchical classification. If no classifier is specified, use 'classifier_name=â€™lc_classifierâ€™ when selecting probabilities.
- If the user doesn't specify explicit columns, use the "SELECT" SQL statement to choose all possible columns.
- Avoid changing the names of columns or tables unless necessary for the SQL query.
- Use the exact class names as they are in the database, marked with single quotes, for example, 'SNIa'.

### IF THE 'feature' TABLE is used with 2 or more features, you need to take the following steps, because it is a transposed table (each feature is in a different row).
I. Create a sub-query using the 'probability' TABLE filtering the desired objects.
II. For each feature, you have to make a sub-query retrieving the specific feature adding the condition of its value, including an INNER JOIN with the 'probability' sub-query to retrieve only the features associated with the desired spatial objects.
III. Make an UNION between the sub-queries of each feature from step II
IV. Make an INTERSECT between the sub-queries of each feature from step II
V. Filter the UNION query selecting the 'oids' in the INTERSECT query
VI. Add to the final result from step V the remaining conditions

### GENERAL
- If the user doesn't specify explicit columns or information that is not in a column, choose all the columns, for example by using the "SELECT" SQL statement.
- Use the exact class names as they are in the database, marked with single quotes, for example, 'SNIa'.
# If you need to use 2 or 3 tables, try using a sub-query over 'probability' TABLE, 'object' TABLE, over an INNER JOIN between 'probability' and 'object', or over an INNER JOIN between 'probability', 'object' and 'magstat', if it is necessary (in this order).
# Add COMMENTS IN Python format so that the user can understand.

# Generate a query for each step, resolving and analysing it, with the following format:
'''python [VARIABLE SUB-QUERY HERE] '''
# Finally, join all the steps in a final query like so: 
'''python full_query = [FINAL QUERY HERE] '''
DON'T include anything else inside and after your FINAL answer.

# Guide yourself by this example for the next query
## Query: Get the object identifiers, probabilities in the stamp classifier and light curves (only detections) for objects whose highest probability in the stamp classifier is obtained for class SN, that had their first detection in the first 2 days of september, and that qualify as fast risers.
## Resulting Python code:
sub_query_object=f'''
SELECT
    object.oid, probability.probability
FROM
    object INNER JOIN
    probability
    ON object.oid = probability.oid
WHERE
    probability.classifier_name='stamp_classifier'
    AND probability.class_name='SN'
    AND probability.ranking=1
    AND object.firstmjd > 60188.0
    AND object.firstmjd < 60189.0
'''

sub_query_detection=f'''
SELECT
  detection.oid, detection.candid, detection.fid, detection.mjd,
  obj_oids.probability
FROM
  ({sub_query_object}) as obj_oids
    INNER JOIN
    detection ON detection.oid = obj_oids.oid
'''

### detections
query=f'''
SELECT
    sq.oid, sq.probability, sq.candid, sq.fid, sq.mjd,
    magstat.fid as magstat_fid, magstat.dmdt_first
FROM
  ({sub_query_detection}) AS sq
  INNER JOIN magstat
  ON sq.oid = magstat.oid
WHERE
  magstat.dmdt_first < -0.25
ORDER BY oid
'''

# Use the next decomposed planification to write the query:
### Decomposition Plan for Retrieving Requested Information from the ALeRCE Database

1. **[Initial Planning] - Identify Relevant Tables and Columns**  
   First, identify the tables and columns required for the query based on the user's request and the provided context. You need data from four tables:  
   - `object`: to retrieve object identifiers (`oid`) and apply conditions on the `firstmjd` column (first detection).  
   - `probability`: to filter objects based on their highest probability class from the `stamp_classifier`, selecting those classified as `SN`.  
   - `detection`: to retrieve information about detections related to each object and light curves.  
   - `magstat`: to determine if the objects qualify as fast risers using the condition on `dmd_dt`.  

2. **[Sub-query] - Filter Objects Classified as `SN`**  
   Create a sub-query that retrieves object identifiers (`oid`) for objects whose highest probability class in the `stamp_classifier` is `SN`. This will be done using the `probability` table, filtering by:  
   - `classifier_name = 'stamp_classifier'`  
   - `class = 'SN'`  
   - `ranking = 1` (since the highest probability for a class is indicated by `ranking = 1`)  

3. **[Condition] - Filter Based on First Detection (MJD)**  
   Use the `object` table to retrieve only the objects whose `firstmjd` falls between 60188 and 60189. This will be an additional filter applied to the `oid` set already retrieved in the previous sub-query.  
   - The `firstmjd` column is indexed, making this filter efficient.  

4. **[Join] - Filter Fast Risers Based on `dmd_dt`**  
   Join the `magstat` table with the filtered set of `oids` from the previous sub-query to retrieve objects that are considered fast risers.  
   - A fast riser is defined by the condition `dmd_dt < -0.25`.  
   - The `magstat` table contains information about the `dmd_dt` value for each object in different bands.  

5. **[Sub-query] - Filter for Only Detections**  
   Use the `detection` table to retrieve light curve information but only include rows that represent actual detections. Since all rows in the `detection` table are considered detections, no additional conditions are needed for filtering on this table.

6. **[Join] - Combine Filtered Objects with Detections**  
   After filtering for objects classified as `SN`, having their first detection in the given MJD range, and qualifying as fast risers, you will join this result with the `detection` table to extract relevant light curve data for each object.  
   - You can use an INNER JOIN between the filtered object identifiers (`oid`) and the `detection` table to get the light curves.

7. **[Sub-query] - Retrieve Class Probabilities**  
   Using a sub-query, retrieve the probabilities associated with the objects in the `probability` table, particularly focusing on the `stamp_classifier` results.  
   - Ensure the query retrieves both the object identifiers (`oid`) and their associated probabilities.  

8. **[Combine Results] - Use UNION or INTERSECT if Needed**  
   Depending on the number of features or objects meeting all conditions, you might need to use UNION or INTERSECT to combine results from different sub-queries. For example, if multiple conditions were applied on different bands in the `magstat` table (for fast risers), an INTERSECT could ensure only objects satisfying all conditions are returned.  

9. **[Final Selection] - Select the Required Columns**  
   Select the final set of columns needed for the result, which are:  
   - Object identifiers (`oid`) from the `object` table  
   - The probabilities from the `probability` table for the `stamp_classifier`  
   - The light curves (detections) from the `detection` table  

10. **[Optimization] - Avoid Unnecessary Joins**  
   Ensure that you favor sub-queries over joins when retrieving object identifiers and probabilities to avoid performance issues. Since the query involves indexed columns (`oid`, `firstmjd`), nested sub-queries will help minimize unnecessary processing time.

### Summary of Steps:
1. **[Initial Planning]**: Identify relevant tables (`object`, `probability`, `detection`, `magstat`) and columns (`oid`, `firstmjd`, `dmd_dt`, etc.).
2. **[Sub-query]**: Retrieve `oid`s of objects classified as `SN` using the `stamp_classifier` from the `probability` table.
3. **[Condition]**: Filter for objects whose `firstmjd` is between 60188 and 60189 in the `object` table.
4. **[Join]**: Filter fast risers by joining the `magstat` table, applying the condition `dmd_dt < -0.25`.
5. **[Sub-query]**: Use the `detection` table to retrieve light curves and relevant detection data.
6. **[Join]**: Combine filtered objects with their detections using INNER JOINs.
7. **[Sub-query]**: Retrieve probabilities for the filtered objects from the `stamp_classifier`.
8. **[Combine Results]**: Use UNION or INTERSECT to combine sub-query results if necessary.
9. **[Final Selection]**: Select final columns (`oid`, probabilities, detections) for the output.
10. **[Optimization]**: Prioritize sub-queries to avoid unnecessary joins, ensuring efficient use of indexed columns.

# If there is SQL code, use it only as reference, changing the conditions you consider necessary.
# You can join some of the steps if you consider it better for the query. For example, if 2 or more use the same table and are not requested to be different sub-queries, then you can join them.