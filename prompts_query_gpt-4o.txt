{'Schema Linking': "['\\nCREATE TABLE object ( /* this is the most important table. It contains the main statistics of an object, independent of time and band */\\n    oid VARCHAR PRIMARY KEY,  /* object identifier */\\n    ndethist INTEGER,  /* number of posible detections above 3 sigma */\\n    ncovhist INTEGER,  /* number of visits */\\n    mjdstarthist DOUBLE PRECISION,  /* time of first observation even if not detected */\\n    mjdendhist DOUBLE PRECISION, /* time of last observation even if not detected */\\n    corrected BOOLEAN, /* whether the object was corrected */\\n    stellar BOOLEAN, /* whether the object is likely psf shaped */\\n    ndet INTEGER, /* number of detections */\\n    g_r_max DOUBLE PRECISION, /* g-r difference color at maximum */\\n    g_r_max_corr DOUBLE PRECISION, /* g-r color at maximum*/\\n    g_r_mean DOUBLE PRECISION, /* mean g-r difference color */\\n    g_r_mean_corr DOUBLE PRECISION, /* mean g-r color */\\n    meanra DOUBLE PRECISION,  /* mean right ascension */\\n    meandec DOUBLE PRECISION,  /* mean declination */\\n    sigmara DOUBLE PRECISION, /* right ascension dispersion */\\n    sigmadec DOUBLE PRECISION, /* declination dispersion */\\n    deltajd DOUBLE PRECISION, /* time difference between last and first detection */\\n    firstmjd DOUBLE PRECISION, /* time of first detection */\\n    lastmjd DOUBLE PRECISION, /* time of last detection */\\n    step_id_corr VARCHAR,\\n    diffpos BOOLEAN, /* whether the first detection was positive or negative */\\n    reference_change BOOLEAN /* whether the reference image changes */\\n);', 'CREATE TABLE probability ( /* this table contains the machine learning derived classification probabilities and rankings */\\n    oid VARCHAR REFERENCES object(oid),\\n    class_name VARCHAR, /* name of the class */\\n    classifier_name VARCHAR, /* name of the classifier */\\n    classifier_version VARCHAR, /* version of the classiifer */\\n    probability DOUBLE PRECISION NOT NULL, /* probability of the class given a classifier and version */\\n    ranking INTEGER NOT NULL, /* class probability ranking (1 is the most likely class) */\\n    PRIMARY KEY (oid, class_name, classifier_name, classifier_version)\\n);']", 'Classification': '\n# For the given request, classify it by difficulty as "simple", "medium", or "advanced" based on the next description.\n\nIf (Only 1 table is used, OR 2 most common tables (probability, object or magstat TABLES) are used)\nOR (No nested-query or JOIN clause is neccesary, OR only one nested-query between \'probability\', \'object\' or \'magstat\' TABLES is required, OR one JOIN between \'probability\', \'object\' or \'magstat\' TABLES):\nTHEN "label: simple"\n\nIf (2 not common tables are used (NOT probability, object, magstat TABLES))\nOR (3 most common tables (probability, object and magstat TABLES) are used)\nOR (features with only one feature are used)\nOR (Need 1 very complex nested-query, OR a very complex JOIN)\nOR (Need 2 nested-query, OR 2 JOIN, OR 1 nested-query with 1 JOIN):\nTHEN "label: medium"\n\nIf (2 or more nested query are needed)\nOR (If 3 tables or more are used)\nOR (If two features from the features table are required):\nTHEN "label: advanced"\n\n# Assume this are the only tables required for the query:\n[\'\\nCREATE TABLE object ( /* this is the most important table. It contains the main statistics of an object, independent of time and band */\\n    oid VARCHAR PRIMARY KEY,  /* object identifier */\\n    ndethist INTEGER,  /* number of posible detections above 3 sigma */\\n    ncovhist INTEGER,  /* number of visits */\\n    mjdstarthist DOUBLE PRECISION,  /* time of first observation even if not detected */\\n    mjdendhist DOUBLE PRECISION, /* time of last observation even if not detected */\\n    corrected BOOLEAN, /* whether the object was corrected */\\n    stellar BOOLEAN, /* whether the object is likely psf shaped */\\n    ndet INTEGER, /* number of detections */\\n    g_r_max DOUBLE PRECISION, /* g-r difference color at maximum */\\n    g_r_max_corr DOUBLE PRECISION, /* g-r color at maximum*/\\n    g_r_mean DOUBLE PRECISION, /* mean g-r difference color */\\n    g_r_mean_corr DOUBLE PRECISION, /* mean g-r color */\\n    meanra DOUBLE PRECISION,  /* mean right ascension */\\n    meandec DOUBLE PRECISION,  /* mean declination */\\n    sigmara DOUBLE PRECISION, /* right ascension dispersion */\\n    sigmadec DOUBLE PRECISION, /* declination dispersion */\\n    deltajd DOUBLE PRECISION, /* time difference between last and first detection */\\n    firstmjd DOUBLE PRECISION, /* time of first detection */\\n    lastmjd DOUBLE PRECISION, /* time of last detection */\\n    step_id_corr VARCHAR,\\n    diffpos BOOLEAN, /* whether the first detection was positive or negative */\\n    reference_change BOOLEAN /* whether the reference image changes */\\n);\', \'CREATE TABLE probability ( /* this table contains the machine learning derived classification probabilities and rankings */\\n    oid VARCHAR REFERENCES object(oid),\\n    class_name VARCHAR, /* name of the class */\\n    classifier_name VARCHAR, /* name of the classifier */\\n    classifier_version VARCHAR, /* version of the classiifer */\\n    probability DOUBLE PRECISION NOT NULL, /* probability of the class given a classifier and version */\\n    ranking INTEGER NOT NULL, /* class probability ranking (1 is the most likely class) */\\n    PRIMARY KEY (oid, class_name, classifier_name, classifier_version)\\n);\']\n\n\n# Give ONLY the predicted difficulty, nothing more.\n# Give the answer in the following format: "label: difficulty" where "difficulty" is the predicted difficulty.\n# For example, if the only need a simple join or nested query between object and probability, then you should type: "label: simple"\n# Remember to use the exact name of the labels provided above.\n# Just give the predicted label and ignore any other task given in the request given as "request".\n\n\nThe request to classify is the following: Give me all the SNe that were first detected between december first 2022 and september first 2023. Return the probability class, the last and the first detection date and the oids of the objects.', 'Decomposition': '', 'Query generation': '# As a SQL expert with a willingness to assist users, you are tasked with crafting a PostgreSQL query for the Automatic Learning for the Rapid Classification of Events (ALeRCE) database. This database serves as a repository for information about astronomical variable objects. The information for every variable object originates from a sequence of one or more astronomical alerts, data packets streamed when an astronomical object shows a significant variation with respect to a reference image. The database information includes flux variations as a function of time (known as light curve), basic object properties such as the coordinates, and advanced features or statistics computed for each object. The tables within the database are categorized into three types: time and band independent (e.g., object and probability), time-independent (e.g., magstats), and time and band-dependent (e.g., detection, forced-photometry). Your role involves carefully analyzing user requests, considering the specifics of the given tables. It is crucial to pay attention to explicit conditions outlined by the user and always maintain awareness of the broader context. Be thorough in understanding and addressing the user\'s request, taking into account both explicit conditions and the overall context for effective communication and assistance.\n\nUser request: Give me all the SNe that were first detected between december first 2022 and september first 2023. Return the probability class, the last and the first detection date and the oids of the objects.\nTables needed: [\'\\nCREATE TABLE object ( /* this is the most important table. It contains the main statistics of an object, independent of time and band */\\n    oid VARCHAR PRIMARY KEY,  /* object identifier */\\n    ndethist INTEGER,  /* number of posible detections above 3 sigma */\\n    ncovhist INTEGER,  /* number of visits */\\n    mjdstarthist DOUBLE PRECISION,  /* time of first observation even if not detected */\\n    mjdendhist DOUBLE PRECISION, /* time of last observation even if not detected */\\n    corrected BOOLEAN, /* whether the object was corrected */\\n    stellar BOOLEAN, /* whether the object is likely psf shaped */\\n    ndet INTEGER, /* number of detections */\\n    g_r_max DOUBLE PRECISION, /* g-r difference color at maximum */\\n    g_r_max_corr DOUBLE PRECISION, /* g-r color at maximum*/\\n    g_r_mean DOUBLE PRECISION, /* mean g-r difference color */\\n    g_r_mean_corr DOUBLE PRECISION, /* mean g-r color */\\n    meanra DOUBLE PRECISION,  /* mean right ascension */\\n    meandec DOUBLE PRECISION,  /* mean declination */\\n    sigmara DOUBLE PRECISION, /* right ascension dispersion */\\n    sigmadec DOUBLE PRECISION, /* declination dispersion */\\n    deltajd DOUBLE PRECISION, /* time difference between last and first detection */\\n    firstmjd DOUBLE PRECISION, /* time of first detection */\\n    lastmjd DOUBLE PRECISION, /* time of last detection */\\n    step_id_corr VARCHAR,\\n    diffpos BOOLEAN, /* whether the first detection was positive or negative */\\n    reference_change BOOLEAN /* whether the reference image changes */\\n);\', \'CREATE TABLE probability ( /* this table contains the machine learning derived classification probabilities and rankings */\\n    oid VARCHAR REFERENCES object(oid),\\n    class_name VARCHAR, /* name of the class */\\n    classifier_name VARCHAR, /* name of the classifier */\\n    classifier_version VARCHAR, /* version of the classiifer */\\n    probability DOUBLE PRECISION NOT NULL, /* probability of the class given a classifier and version */\\n    ranking INTEGER NOT NULL, /* class probability ranking (1 is the most likely class) */\\n    PRIMARY KEY (oid, class_name, classifier_name, classifier_version)\\n);\']\n\n# General context about the database:\n## General Information about the Schema and Database\n- An object is uniquely identified by its object identifier or \'oid\' index, used in most tables\n- A detection from an object is identified by the candidate identifier or \'candid\' index, used only in the detection table\n- A given band is identified by the filter identifier or \'fid\' index, used in the magstats, feature, and detection tables\n- In most cases you will need to use information from the object table\n- When particular astronomical classes are requested, you will need to use the probability table \n- Prioritize obtaining oids in a subquery to optimize the main query.\n- Utilize nested queries to retrieve oids, preferably selecting the \'probability\' or \'object\' table.\n- Avoid JOIN clauses; instead, favor nested queries.\n- Beware of variables that are not indexed when doing the queries. Favour using nested queries where the inner queries use indexed variables.\n- Note that the typical timeout time is 2 minutes\n- Special attention needs to be paid to the feature table, which, if possible, should be avoided. In this table the name of a given feature is stored in the column \'name\' and its value for a given object in the column \'value\'. These columns are not indexed, so you should query this table in the outer levels of a nested query, after most of the filtering has already happened using indexed variables.\n\n## ALeRCE Pipeline Details\n- Stamp Classifier (denoted as ""stamp_classifier""): A convolutional neural network that uses as input the image stamps from a given object and that uses a 5 class taxonomy. This classifier is triggered only by the first alert of every object.\n- Light Curve Classifier (denoted as ""lc_classifier""): A balanced hierarchical random forest classifier that uses as input object features and that consists of four models with a taxonomy of 15 classes in total. This classifier is triggered with every new alert of an object with at least six detections in a given band.\n- The first hierarchical classifier of the Light Curve Classifier has three classes: [periodic, stochastic, transient], denoted as ""lc_classifier_top"".\n- Three additional classifiers of the Light Curve Classifier specialize in different types of object: Periodic, Transient, and Stochastic, denoted as ""lc_classifier_periodic"", ""lc_classifier_transient"" and ""lc_classifier_stochastic"", respectively.\n- The 15 classes are separated for each object type:\n  - Transient: [SNe Ia (\'SNIa\'), SNe Ib/c (\'SNIbc\'), SNe II (\'SNII\'), and Super Luminous SNe (\'SLSN\')].\n  - Stochastic: [Active Galactic Nuclei (\'AGN\'), Quasi Stellar Object (\'QSO\'), \'Blazar\', Cataclysmic Variable/Novae (\'CV/Nova\'), and Young Stellar Object (\'YSO\')].\n  - Periodic: [Delta Scuti (\'DSCT\'), RR Lyrae (\'RRL\'), Cepheid (\'Ceph\'), Long Period Variable (\'LPV\'), Eclipsing Binary (\'E\'), and other periodic objects (\'Periodic-Other\')].\n## Probability Variable Names\n- classifier_name=(\'lc_classifier\', \'lc_classifier_top\', \'lc_classifier_transient\', \'lc_classifier_stochastic\', \'lc_classifier_periodic\', \'stamp_classifier\')\n- Classes in \'lc_classifier\'= (\'SNIa\', \'SNIbc\', \'SNII\', \'SLSN\', \'QSO\', \'AGN\', \'Blazar\', \'CV/Nova\', \'YSO\', \'LPV\', \'E\', \'DSCT\', \'RRL\', \'CEP\', \'Periodic-Other\')\n- Classes in \'lc_classifier_top\'= (\'transient\', \'stochastic\', \'periodic\')\n- Classes in \'lc_classifier_transient\'= (\'SNIa\', \'SNIbc\', \'SNII\', \'SLSN\')\n- Classes in \'lc_classifier_stochastic\'= (\'QSO\', \'AGN\', \'Blazar\', \'CV/Nova\', \'YSO\')\n- Classes in \'lc_classifier_periodic\'= (\'LPV\', \'E\', \'DSCT\', \'RRL\', \'CEP\', \'Periodic-Other\')\n- Classes in \'stamp_classifier\'= (\'SN\', \'AGN\', \'VS\', \'asteroid\', \'bogus\')\n\n## Important details about the database required for the query:\n## Default Parameters to Consider\n- Class probabilities for a given classifier and object are sorted from most to least likely, where the relative position is indicated by the \'ranking\' column in the probability table. Hence, the most probable class should have \'ranking\'=1.\n- The ALeRCE classification pipeline includes a Stamp Classifier and a Light Curve Classifier. The Light Curve classifier employs a hierarchical classification. If no classifier is specified, use \'classifier_name=""lc_classifier""\' when selecting probabilities.\n- If the user doesn\'t specify explicit columns, use the "SELECT" SQL statement to choose all possible columns.\n- Avoid changing the names of columns or tables unless necessary for the SQL query.\n- Use the exact class names as they are in the database, marked with single quotes, for example, \'SNIa\'.\n\n# Answer ONLY with a SQL query, with the following format: \n```sql SQL_QUERY_HERE ```\n\nDON\'T include anything else in your answer.'}